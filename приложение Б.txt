Процедура СМЗ_РасчитатьПростойСотрудниковПерерасчёт(Документ, СтараяДата) Экспорт
	МассивТабельныхНомеров = Новый Массив;
	Документ.Начисления.Очистить();
	СтараяДата = Документ.Дата;
	Документ.ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника;
	Документ.Начисление = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Часы за свой счет"); 
	УвольнительныеСотрудников = ПолучитьТаблицуУвольнительныхСотрудников(НачалоМесяца(СтараяДата));
	Для Каждого ТекСтрокаСотрудника Из УвольнительныеСотрудников Цикл
		МассивТабельныхНомеров.Добавить(Число(ТекСтрокаСотрудника.Сотрудник.Код));
	КонецЦикла;
	ВремяЗаМесяцСКУД = ПолучитьОтработанноеВремяЗаМесяц(ПолучитьДанныеСКУД(МассивТабельныхНомеров, СтараяДата), МассивТабельныхНомеров, СтараяДата);
	НормаСотрудников = ПолучитьСредниеЧасыГрафика(Справочники.ГрафикиРаботыСотрудников.НайтиПоНаименованию("5–ти дневная рабочая неделя").Ссылка, СтараяДата);
	Счт = 0;
	Для Каждого ТекСтрокаСотрудника Из УвольнительныеСотрудников Цикл
		БесплатныеЧасы = (((ВремяЗаМесяцСКУД[Счт]/3600)+ТекСтрокаСотрудника.ЧасыРабочие)/НормаСотрудников)*4;
		Если БесплатныеЧасы > 4 Тогда 
			БесплатныеЧасы = 4;
		КонецЕсли;
		//Если ТекСтрокаСотрудника.Часы < 0 Тогда
		ИтоговыеУвольнительныеСотрудника = ТекСтрокаСотрудника.Часы;
		Начисления = Документ.Начисления.Добавить();
		Начисления.Сотрудник = ТекСтрокаСотрудника.Сотрудник;
		Начисления.Подразделение = ТекСтрокаСотрудника.Подразделение;
		Начисления.ИтоговыеЧасыПростоя = ИтоговыеУвольнительныеСотрудника – БесплатныеЧасы;
		Начисления.ДоступныеЧасыПростоя = БесплатныеЧасы;
		//КонецЕсли;
		Счт = Счт + 1;
	КонецЦикла;
	Документ.Записать(РежимЗаписиДокумента.Проведение);               
КонецПроцедуры


Процедура СМЗ_РасчитатьПростойСотрудников() Экспорт
	МассивТабельныхНомеров = Новый Массив;
	Документ = Документы.УвольнительныеЗаМесяц.СоздатьДокумент();
	Документ.Дата = ТекущаяДата();
	Документ.ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника;
	Документ.Начисление = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Часы за свой счет"); 
	УвольнительныеСотрудников = ПолучитьТаблицуУвольнительныхСотрудников(НачалоМесяца(ТекущаяДата()));
	Для Каждого ТекСтрокаСотрудника Из УвольнительныеСотрудников Цикл
		МассивТабельныхНомеров.Добавить(Число(ТекСтрокаСотрудника.Сотрудник.Код));
	КонецЦикла;
	ВремяЗаМесяцСКУД = ПолучитьОтработанноеВремяЗаМесяц(ПолучитьДанныеСКУД(МассивТабельныхНомеров,ТекущаяДата()), МассивТабельныхНомеров, ТекущаяДата());
	НормаСотрудников = ПолучитьСредниеЧасыГрафика(Справочники.ГрафикиРаботыСотрудников.НайтиПоНаименованию("5–ти дневная рабочая неделя").Ссылка,ТекущаяДата());
	Счт = 0;
	Для Каждого ТекСтрокаСотрудника Из УвольнительныеСотрудников Цикл
		БесплатныеЧасы = (((ВремяЗаМесяцСКУД[Счт]/3600)+ТекСтрокаСотрудника.ЧасыРабочие)/НормаСотрудников)*4;
		Если БесплатныеЧасы > 4 Тогда 
			БесплатныеЧасы = 4;
		КонецЕсли;
		//Если ТекСтрокаСотрудника.Часы < 0 Тогда
		ИтоговыеУвольнительныеСотрудника = ТекСтрокаСотрудника.Часы;
		Начисления = Документ.Начисления.Добавить();
		Начисления.Сотрудник = ТекСтрокаСотрудника.Сотрудник;
		Начисления.Подразделение = ТекСтрокаСотрудника.Подразделение;
		Начисления.ИтоговыеЧасыПростоя = ИтоговыеУвольнительныеСотрудника – БесплатныеЧасы;
		Начисления.ДоступныеЧасыПростоя = БесплатныеЧасы;
		//КонецЕсли;
		Счт = Счт + 1;
	КонецЦикла;
	Документ.Записать(РежимЗаписиДокумента.Проведение);               
КонецПроцедуры


Функция ПолучитьТаблицуУвольнительныхСотрудников(знач Дата) Экспорт 
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник");
	ТаблицаСотрудников.Колонки.Добавить("Часы");
	ТаблицаСотрудников.Колонки.Добавить("ЧасыРабочие");
	ТаблицаСотрудников.Колонки.Добавить("Подразделение");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УвольнительныеСотрудниковОбороты.Сотрудник КАК Сотрудник,
	|	УвольнительныеСотрудниковОбороты.Подразделение КАК Подразделение,
	|	УвольнительныеСотрудниковОбороты.ЧасыРасход КАК ЧасыРасход,
	|	УвольнительныеСотрудниковОбороты.ЧасыПриход КАК ЧасыПриход
	|ИЗ
	|	РегистрНакопления.УвольнительныеСотрудников.Обороты(, , , ДатаПростоя МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)) КАК УвольнительныеСотрудниковОбороты
	|ГДЕ
	|	УвольнительныеСотрудниковОбороты.ЧасыРасход <> 0";
	Запрос.УстановитьПараметр("Дата",Дата);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строка = ТаблицаСотрудников.Добавить();
		Строка.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Строка.Часы = ВыборкаДетальныеЗаписи.ЧасыРасход;
		Строка.ЧасыРабочие = ВыборкаДетальныеЗаписи.ЧасыПриход;
		Строка.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
	КонецЦикла;
	
	Возврат ТаблицаСотрудников;
КонецФункции

Функция ПолучитьДанныеСКУД(ТабельныеНомера, знач Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_Log.EmployeeID.SecondName КАК Отчество,
	|	dbo_Log.EmployeeID.FirstName КАК ИмяСотрудника,
	|	dbo_Log.EmployeeID.LastName КАК Фамилия,
	|	dbo_Log.EmployeeID.TableNumber КАК ТабНомер,
	|	dbo_Log.DateTime КАК ДатаСобытия,
	|	dbo_Log.Message КАК Событие
	|ИЗ
	|	ВнешнийИсточникДанных.SKUD_RUSGUARD.Таблица.dbo_Log КАК dbo_Log
	|ГДЕ
	|	(dbo_Log.Message = ""Вход""
	|	ИЛИ dbo_Log.Message = ""Выход"")
	|	И dbo_Log.DateTime МЕЖДУ &ДатаСрезаНачало И &ДатаСрезаКонец
	|	И dbo_Log.Message <> """"
	|	И dbo_Log.EmployeeID.TableNumber В(&ТабНомераДействующихСотрудников)
	
	|
	|СГРУППИРОВАТЬ ПО
	|	dbo_Log.EmployeeID.SecondName,
	|	dbo_Log.EmployeeID.FirstName,
	|	dbo_Log.EmployeeID.LastName,
	|	dbo_Log.EmployeeID.TableNumber,
	|	dbo_Log.DateTime,
	|	dbo_Log.Message,
	|	dbo_Log.OperatorID._id,
	|	dbo_Log.Details,
	|	dbo_Log.ThirdPartyContentType,
	|	dbo_Log.ThirdPartyContentData,
	|	dbo_Log.Представление,
	|	dbo_Log.DriverID.Представление,
	|	dbo_Log.EmployeeID.EmployeeGroupID.Name
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия,
	|	Фамилия";
	
	ТЗ_СКУД=Новый ТаблицаЗначений;                                               
	ТЗ_СКУД.Колонки.Добавить("ДатаВремяСобытия");
	ТЗ_СКУД.Колонки.Добавить("Событие");
	ТЗ_СКУД.Колонки.Добавить("ТабНомер");
	ТЗ_СКУД.Колонки.Добавить("Отработано");
	ТЗ_СКУД.Колонки.Добавить("ФИО");
	ТЗ_СКУД.Колонки.Добавить("Подразделение");
	ТЗ_СКУД.Колонки.Добавить("ДатаСобытия");
	
	
	Запрос.УстановитьПараметр("ДатаСрезаНачало",Формат(НачалоМесяца(Дата),"ДФ=""гггг–ММ–дд ЧЧ:мм:сс"""));
	Запрос.УстановитьПараметр("ДатаСрезаКонец",Формат(КонецМесяца(Дата),"ДФ=""гггг–ММ–дд ЧЧ:мм:сс"""));
	Запрос.УстановитьПараметр("ТабНомераДействующихСотрудников",ТабельныеНомера);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТабНомер) Тогда
			Табномер=СОКРЛП(СтрЗаменить(Строка(ВыборкаДетальныеЗаписи.ТабНомер),Символы.НПП, ""));
			Если СтрДлина(Табномер)=2 тогда   //Дополнение длины табеля до 4х символов
				Табномер = "00" + Табномер;				
			ИначеЕсли СтрДлина(Табномер)=1 тогда
				Табномер = "000" + Табномер;
			ИначеЕсли СтрДлина(Табномер)=3 тогда
				Табномер = "0" + Табномер;
			КонецЕсли;
			НоваяСтрока	 				= ТЗ_СКУД.Добавить();
			НоваяСтрока.ТабНомер			= Табномер;
			СтроковаяДата 					= ВыборкаДетальныеЗаписи.ДатаСобытия;
			СтроковаяДата 					= СтрЗаменить(СтроковаяДата , "–","");
			СтроковаяДата 					= СтрЗаменить(СтроковаяДата , ":","");
			СтроковаяДата 					= СтрЗаменить(СтроковаяДата, " ", "");
			СтроковаяДата					= Дата(СтроковаяДата);
			НоваяСтрока.ДатаВремяСобытия	= СтроковаяДата;
			НоваяСтрока.ДатаСобытия		= Формат(СтроковаяДата, "ДФ=""гггг–ММ–дд""");
			НоваяСтрока.ФИО 				= ВыборкаДетальныеЗаписи.Фамилия + " " + ВыборкаДетальныеЗаписи.ИмяСотрудника + " " + ВыборкаДетальныеЗаписи.Отчество;
			НоваяСтрока.Событие 			= ВыборкаДетальныеЗаписи.Событие;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Возврат ТЗ_СКУД;
КонецФункции

Функция ПолучитьОтработанноеВремяЗаМесяц(ДанныеСКУД, МассивТабельныхНомеров, знач Дата) Экспорт
	МассивВсегоОтработаноСекунд = Новый Массив;
	ДатаН = НачалоМесяца(Дата);
	ДатаК = КонецМесяца(Дата);
	СписокДат = Новый Массив;
	Пока ДатаН <= ДатаК Цикл
		СписокДат.Добавить(Формат(ДатаН, "ДФ=""гггг–ММ–дд"""));
		ДатаН = ДатаН + 60 * 60 * 24; 	
	КонецЦикла;
	
	Для Каждого ТабНомер Из МассивТабельныхНомеров Цикл
		ОтработаноВсего = 0;
		СтрокаТабНомер = СтрЗаменить(Строка(ТабНомер),Символы.НПП, "");
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		СтрокаТабНомер = ДобавитьНули(СтрокаТабНомер, 4);
		Для Каждого Дата Из СписокДат Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТабНомер", СтрокаТабНомер);
			ПараметрыОтбора.Вставить("ДатаСобытия", Дата);
			НайденныеСтроки = ДанныеСКУД.НайтиСтроки(ПараметрыОтбора); // Входы/выходы по сотруднику на Дату
			
			//ОтработаноСтруктура = ПолучитьОтработанноеВремя(НайденныеСтроки);
			//ОтработаноВсего = ОтработаноВсего + ОтработаноСтруктура.ОтработаноСекунд;
			Отработано = ПолучитьОтработанноеВремя(НайденныеСтроки);
			ОтработаноВсего = ОтработаноВсего + Отработано; 
		КонецЦикла;
		МассивВсегоОтработаноСекунд.Добавить(ОтработаноВсего);
	КонецЦикла;
	Возврат МассивВсегоОтработаноСекунд;
Конецфункции
&НаСервере
Функция ПолучитьОтработанноеВремя(МассивСКУД)
	Старт = Ложь;
	ВремяВхода = НачалоДня(ТекущаяДата());
	ВремяВыхода = НачалоДня(ТекущаяДата());
	Отработано = 0;
	ТекущееСостояние = Ложь;  //	Вход/Выход
	
	Для Каждого Строка Из МассивСКУД Цикл //Обход всех строк таблицы
		Если Строка.Событие = "Вход" И Старт = Ложь Тогда //Ищем первый вход на Дату и от нее начинаем отсчет
			ВремяВхода = Строка.ДатаВремяСобытия; 
			Старт = Истина;
			ТекущееСостояние = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Строка.Событие = "Вход" И ТекущееСостояние = Ложь И Старт Тогда  //На случай если скуд глюканул и не засчитал выход и подряд идет два Входа
			ВремяВхода = Строка.ДатаВремяСобытия;
			ТекущееСостояние = Истина;
		ИначеЕсли Строка.Событие = "Выход" и ТекущееСостояние = Истина И Старт Тогда
			ВремяВыхода = Строка.ДатаВремяСобытия;
			ТекущееСостояние = Ложь;
			Отработано = Отработано + (ВремяВыхода – ВремяВхода);   //Находит разницу в секундах между выходом и входом и прибавляет к отработанному времени текущего сотрудника
		КонецЕсли;
		
		
	КонецЦикла;
	
	Старт = Ложь;
	ВремяВхода = НачалоДня(ТекущаяДата());
	ВремяВыхода = НачалоДня(ТекущаяДата());
	Отсутствовал = 0;
	ТекущееСостояние = Ложь;  //	Вход/Выход    Вход – на предприятии, Выход – Нет
	
	Для Каждого Строка Из МассивСКУД Цикл //Подсчет времени, сколько сотрудника не было на предприятии за день. Принцип тот же
		Если Строка.Событие = "Выход" И Старт = Ложь Тогда
			ВремяВхода = Строка.ДатаВремяСобытия; 
			Старт = Истина;
			ТекущееСостояние = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Строка.Событие = "Выход" И ТекущееСостояние = Ложь И Старт Тогда
			ВремяВхода = Строка.ДатаВремяСобытия;
			ТекущееСостояние = Истина;
		ИначеЕсли Строка.Событие = "Вход" и ТекущееСостояние = Истина И Старт Тогда
			ВремяВыхода = Строка.ДатаВремяСобытия;
			ТекущееСостояние = Ложь;
			Отсутствовал = Отсутствовал + (ВремяВхода – ВремяВыхода);
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если Отсутствовал < 0 Тогда    //Если отсутствовал, время уходит в минус. Для удобства работы число переводится в положительное
		Отсутствовал = Отсутствовал * –1;
	КонецЕсли;
	
	Если Отработано > 16200 Тогда //Если не было больше 4,5 часов, то сотруднику полагается обед и из отработанных часов вычитается пол часа на обед
		Если Отсутствовал = 0 Тогда //Если никуда не выходил или питался на территории предприятия, то время отсутствия =0 и все равно надо вычесть пол часа обеда 
			Отсутствовал = 1800;
			Отработано = Отработано – 1800;
		ИначеЕсли Отсутствовал > 0 И Отсутствовал < 1800 Тогда   //Если выходил, но время отсутствия <30м, то оно все равно приравнивается до положенных ему 30м
			Отсутствовал = 1800 – Отсутствовал;
			Отработано = Отработано – Отсутствовал;
		Иначе 
			//Если отсутствовал > 30м, то вычитать ничего не нужно, ибо у него в отработанном будет правильное число
		КонецЕсли;
	КонецЕсли;
		
	Возврат Отработано;
	
КонецФункции

Функция ПолучитьГрафикРаботы(Сотрудник)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|ГДЕ
	|	ГрафикРаботыСотрудников.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.ГрафикРаботы;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ПолучитьСредниеЧасыГрафика(ГрафикРаботыСотрудников, знач Дата)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасов
	|ИЗ
	|	РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
	|ГДЕ
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год = &Год
	|	И СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников = &ГрафикРаботыСотрудников";
	Год = Число(Формат(Дата,"ДФ=yyyy"));
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("ГрафикРаботыСотрудников", ГрафикРаботыСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.СреднемесячноеЧислоЧасов;
	
КонецФункции
Функция ДобавитьНули(Значение, НужнаяДлинаЗначения)
       
    Значение = СтрЗаменить(Формат(Значение, "ЧГ="), " ", "");
	НадоНулей = НужнаяДлинаЗначения – СтрДлина(Значение);
	Если НадоНулей <> 0 Тогда
		ВедущиеНули = Формат(0,"ЧЦ="+НадоНулей+";ЧН=; ЧВН=; ЧГ=0");
		Возврат ВедущиеНули + Значение;
	Иначе
		Возврат Значение;
    КонецЕсли;
КонецФункции
