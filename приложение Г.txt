
Процедура ОбработкаПроведения(Отказ, Режим)
	Дата = ТекущаяДата();
	МассивТабельныхНомеров = Новый Массив;
	МассивСотрудников = Новый Массив; //Массив увольняющихся сотрудников
	УвольнительныеСотрудников = Новый Массив;
	ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника;
	Начисление = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Часы за свой счет");
	Для Каждого ТекСтр Из Начисления Цикл
		МассивСотрудников.Добавить(ТекСтр.Сотрудник);	
	КонецЦикла;
	ВсеУвольнительныеЗаМесяц = ПолучитьВсеУвольнительныеЗаМесяц(Дата);
	УвольнительныеСотрудников = ПолучитьТаблицуУвольнительныхСотрудников(НачалоМесяца(ТекущаяДата()), МассивСотрудников);
	Для Каждого ТекСтрокаСотрудника Из УвольнительныеСотрудников Цикл
		МассивТабельныхНомеров.Добавить(Число(ТекСтрокаСотрудника.Сотрудник.Код));
	КонецЦикла;
	ВремяЗаМесяцСКУД = _СвязьСВнешнимиИсточникамиДанных.ПолучитьОтработанноеВремяЗаМесяц(_СвязьСВнешнимиИсточникамиДанных.ПолучитьДанныеСКУД(МассивТабельныхНомеров, Дата), МассивТабельныхНомеров, Дата);
	НормаСотрудников = _СвязьСВнешнимиИсточникамиДанных.ПолучитьСредниеЧасыГрафика(Справочники.ГрафикиРаботыСотрудников.НайтиПоНаименованию("5–ти дневная рабочая неделя").Ссылка, Дата);
	счт = 0;
	Если Проведен = Ложь Тогда 
		Начисления.Очистить();
	КонецЕсли;
	Для каждого ТекСтрокаСотрудника Из УвольнительныеСотрудников Цикл
		БесплатныеЧасы = (((ВремяЗаМесяцСКУД[счт]/3600)+ТекСтрокаСотрудника.ЧасыРабочие)/НормаСотрудников)*4;
		Если БесплатныеЧасы > 4 Тогда 
			БесплатныеЧасы = 4;
		КонецЕсли;
		ИтоговыеУвольнительныеСотрудника = ТекСтрокаСотрудника.Часы;
		Начисления.Добавить();
		Начисления[счт].Сотрудник = ТекСтрокаСотрудника.Сотрудник;
		Начисления[счт].Подразделение = ТекСтрокаСотрудника.Подразделение; 
		Начисления[счт].ИтоговыеЧасыПростоя = ИтоговыеУвольнительныеСотрудника – БесплатныеЧасы;
		Начисления[счт].ДоступныеЧасыПростоя = БесплатныеЧасы;
		счт = счт + 1;
	КонецЦикла;
	Записать(РежимЗаписиДокумента.Запись);
	
	
	Для Каждого ТекСотрудник Из Начисления Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Сотрудник",ТекСотрудник.Сотрудник);
		НайденныеСтроки = ВсеУвольнительныеЗаМесяц.НайтиСтроки(ПараметрыОтбора);
		
		СтрокаСотрудника = Начисления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокаСотрудника.Количество()= 0 ИЛИ НайденныеСтроки.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		ВычлиБесплатноеВремя = ЛОЖЬ;
		ОстатокБесплатныхЧасов = СтрокаСотрудника[0].ДоступныеЧасыПростоя;
		Счётчик = 1;
		Для Каждого ТекСтрокаНачисления Из НайденныеСтроки Цикл
			
			Если ВычлиБесплатноеВремя = ЛОЖЬ Тогда
				ВычитаемыеЧасы = ТекСтрокаНачисления.Часы – ОстатокБесплатныхЧасов; 
				Если ВычитаемыеЧасы <= 0 Тогда
					ОстатокБесплатныхЧасов = –ВычитаемыеЧасы;
					ВычитаемыеЧасы = 0;
					Продолжить;
				Иначе 
					ВычлиБесплатноеВремя = ИСТИНА;
				КонецЕсли;
			Иначе
				ВычитаемыеЧасы = ТекСтрокаНачисления.Часы;
			КонецЕсли;
			
			//регистр ОтработанноеВремяПоСотрудникам 
			//добавляет время при включенных остальных регистрах
			Движения.ОтработанноеВремяПоСотрудникам.Записывать = Истина;
			Движение = Движения.ОтработанноеВремяПоСотрудникам.Добавить();
			Движение.Период = НачалоМесяца(Дата);
			Движение.Организация = Справочники.Организации.НайтиПоНаименованию("ФКП ""Саранский механический завод""");
			Движение.ФизическоеЛицо = ТекСтрокаНачисления.Сотрудник.ФизическоеЛицо;
			Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
			Движение.Подразделение = ТекСтрокаНачисления.Подразделение;
			Движение.Начисление = Начисление;
			Движение.ОтработаноЧасов = ВычитаемыеЧасы;
			Движение.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			Движение.ПериодДействия = НачалоМесяца(Дата);
			Движение.ВремяВЧасах = ИСТИНА;
			Движение.ДатаНачала = ТекСтрокаНачисления.ДатаПростоя;
			Движение.ИдентификаторСтроки = Счётчик;
			Движение.Сторно = ЛОЖЬ;
			
			// регистр ДанныеОперативногоУчетаРабочегоВремениСотрудников 
			Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Записывать = Истина;
			Движение = Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Добавить();
			Движение.Период = НачалоДня(ТекСтрокаНачисления.ДатаПростоя);
			Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
			Движение.ПериодРегистрации = НачалоМесяца(Дата);
			Движение.ВидУчетаВремени = Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Часы за свой счет");
			Движение.ВидДанных = Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеВнутрисменныхНеявок;
			Движение.Дни = 1;
			Движение.Часы = ВычитаемыеЧасы;
			Движение.ПереходящаяЧастьПредыдущейСмены = ЛОЖЬ;
			Движение.ПереходящаяЧастьТекущейСмены = ЛОЖЬ;
			Движение.Организация = Справочники.Организации.НайтиПоНаименованию("ФКП ""Саранский механический завод""");
			
			// регистр Начисления
			Движения.Начисления.Записывать = Истина;
			Движение = Движения.Начисления.Добавить();
			Движение.Сторно = Ложь;
			Движение.ВидРасчета = Начисление;
			Движение.ПериодДействияНачало = НачалоДня(ТекСтрокаНачисления.ДатаПростоя);
			Движение.ПериодДействияКонец = НачалоДня(ТекСтрокаНачисления.ДатаПростоя);
			Движение.ПериодРегистрации = НачалоМесяца(Дата);
			Движение.БазовыйПериодНачало = НачалоДня(ТекСтрокаНачисления.ДатаПростоя);
			Движение.БазовыйПериодКонец = НачалоДня(ТекСтрокаНачисления.ДатаПростоя);
			Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
			Движение.ФизическоеЛицо = ТекСтрокаНачисления.Сотрудник.ФизическоеЛицо;
			Движение.ГоловнаяОрганизация = Справочники.Организации.НайтиПоНаименованию("ФКП ""Саранский механический завод""");
			Движение.СторноТекущегоПериода = ЛОЖЬ;
			Движение.ОтработаноЧасов = ВычитаемыеЧасы;
			Движение.ГрафикРаботы = ТекСтрокаНачисления.Сотрудник;
			Движение.ВремяВЧасах = ИСТИНА;
			Движение.ВремяВЦеломЗаПериод = ЛОЖЬ;
			Движение.ГрафикРаботыНорма = ПолучитьГрафикРаботы(ТекСтрокаНачисления.Сотрудник);
			Движение.Организация = Справочники.Организации.НайтиПоНаименованию("ФКП ""Саранский механический завод""");
			Движение.ФиксСтрока = ИСТИНА;
			Движение.ФиксЗаполнение = ЛОЖЬ;
			Движение.ФиксРасчетВремени = ЛОЖЬ;
			Движение.ФиксРасчет = ЛОЖЬ;
			Движение.ФиксСторно = ЛОЖЬ;
			Движение.ИдентификаторСтроки = Счётчик;
			Движение.ПериодРегистрацииВремени = НачалоМесяца(Дата);
			Движение.Месяц = НачалоМесяца(Дата);
			Движение.ГоловнойСотрудник = ТекСтрокаНачисления.Сотрудник;
			Движение.ОбщийГрафик = ПолучитьГрафикРаботы(ТекСтрокаНачисления.Сотрудник);
			Движение.Перерасчет = ЛОЖЬ;
			
			// регистр ВытесняемоеПлановоеВремяСотрудников 
			Движения.ВытесняемоеПлановоеВремяСотрудников.Записывать = Истина;
			Движение = Движения.ВытесняемоеПлановоеВремяСотрудников.Добавить();
			Движение.Период = НачалоДня(ТекСтрокаНачисления.ДатаПростоя);
			Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
			Движение.ПериодРегистрации = НачалоМесяца(Дата);
			Движение.ВидУчетаВремени = Справочники.ВидыИспользованияРабочегоВремени.Явка;
			Движение.Часы = ВычитаемыеЧасы;
			Движение.ПереходящаяЧастьПредыдущейСмены = Ложь;
			Движение.ПереходящаяЧастьТекущейСмены = Ложь;
			Движение.Организация = Справочники.Организации.НайтиПоНаименованию("ФКП ""Саранский механический завод""");
			
			//добавляет ЧБС в расчетку
			Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
			Движение = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
			Движение.Период = НачалоМесяца(Дата);
			Движение.Организация = Справочники.Организации.НайтиПоНаименованию("ФКП ""Саранский механический завод""");
			Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
			Движение.ФизическоеЛицо = ТекСтрокаНачисления.Сотрудник.ФизическоеЛицо;
			Движение.СтатьяРасходов = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("ОТ");
			Движение.Подразделение = ТекСтрокаНачисления.Подразделение;
			Движение.НачислениеУдержание = ПланыВидовРасчета.Начисления.НайтиПоКоду("ЧСВ");
			Движение.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			Движение.ПериодДействия = НачалоМесяца(Дата);
			Движение.ДатаНачала = НачалоДня(ТекСтрокаНачисления.ДатаПростоя);
			Движение.ДатаОкончания = НачалоДня(ТекСтрокаНачисления.ДатаПростоя);
			Движение.ДанныеМежрасчетногоПериода = ЛОЖЬ;
			Движение.ТерриторияВыполненияРаботВОрганизации = ТекСтрокаНачисления.Подразделение;
			Движение.ИдентификаторСтроки = Счётчик;
			Движение.Сторно = ЛОЖЬ;
			Движение.ОграничениеВзыскания = ЛОЖЬ;
			Движение.УчитыватьВРаспределенииНДФЛ = ЛОЖЬ;
			
			Движения.ДанныеОВремениДляРасчетаСреднегоОбщий.Записывать = Истина;
			Движение = Движения.ДанныеОВремениДляРасчетаСреднегоОбщий.Добавить();
			Движение.Период = НачалоМесяца(Дата);
			Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
			Движение.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010;
			Движение.ОтработаноЧасов = ВычитаемыеЧасы;
			Движение.Сторно = ЛОЖЬ;

			Счётчик = Счётчик + 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьГрафикРаботы(Сотрудник)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|ГДЕ
	|	ГрафикРаботыСотрудников.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.ГрафикРаботы;		
КонецФункции

Функция ПолучитьВсеУвольнительныеЗаМесяц(Дата)
	ТаблицаУвольнительных = Новый ТаблицаЗначений;
	ТаблицаУвольнительных.Колонки.Добавить("Сотрудник");
	ТаблицаУвольнительных.Колонки.Добавить("Часы");
	ТаблицаУвольнительных.Колонки.Добавить("Подразделение");
	ТаблицаУвольнительных.Колонки.Добавить("ДатаПростоя");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УвольнительныеСотрудниковОбороты.ДатаПростоя КАК ДатаПростоя,
	|	УвольнительныеСотрудниковОбороты.Сотрудник КАК Сотрудник,
	|	УвольнительныеСотрудниковОбороты.ЧасыРасход КАК ЧасыРасход,
	|	УвольнительныеСотрудниковОбороты.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрНакопления.УвольнительныеСотрудников.Обороты(, , , ДатаПростоя МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)) КАК УвольнительныеСотрудниковОбороты";
	Запрос.УстановитьПараметр("Дата",Дата);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строка = ТаблицаУвольнительных.Добавить();
		Строка.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Строка.Часы = ВыборкаДетальныеЗаписи.ЧасыРасход;
		Строка.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
		Строка.ДатаПростоя = ВыборкаДетальныеЗаписи.ДатаПростоя;
	КонецЦикла;
	
	Возврат ТаблицаУвольнительных;
КонецФункции

Функция ПолучитьТаблицуУвольнительныхСотрудников(Дата, Сотрудники) Экспорт 
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник");
	ТаблицаСотрудников.Колонки.Добавить("Часы");
	ТаблицаСотрудников.Колонки.Добавить("ЧасыРабочие");
	ТаблицаСотрудников.Колонки.Добавить("Подразделение");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УвольнительныеСотрудниковОбороты.Сотрудник КАК Сотрудник,
	|	УвольнительныеСотрудниковОбороты.Подразделение КАК Подразделение,
	|	УвольнительныеСотрудниковОбороты.ЧасыРасход КАК ЧасыРасход,
	|	УвольнительныеСотрудниковОбороты.ЧасыПриход КАК ЧасыПриход
	|ИЗ
	|	РегистрНакопления.УвольнительныеСотрудников.Обороты(, , , ДатаПростоя МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ) И Сотрудник В (&Сотрудники)) КАК УвольнительныеСотрудниковОбороты
	|ГДЕ
	|	УвольнительныеСотрудниковОбороты.ЧасыРасход <> 0";
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строка = ТаблицаСотрудников.Добавить();
		Строка.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Строка.Часы = ВыборкаДетальныеЗаписи.ЧасыРасход;
		Строка.ЧасыРабочие = ВыборкаДетальныеЗаписи.ЧасыПриход;
		Строка.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УвольнительныеСотрудников.Регистратор КАК Регистратор,
	|	УвольнительныеСотрудников.Период КАК Период,
	|	УвольнительныеСотрудников.Регистратор КАК Регистратор1,
	|	УвольнительныеСотрудников.НомерСтроки КАК НомерСтроки,
	|	УвольнительныеСотрудников.Активность КАК Активность,
	|	УвольнительныеСотрудников.ВидДвижения КАК ВидДвижения,
	|	УвольнительныеСотрудников.ДатаПростоя КАК ДатаПростоя,
	|	УвольнительныеСотрудников.Сотрудник КАК Сотрудник,
	|	УвольнительныеСотрудников.Подразделение КАК Подразделение,
	|	УвольнительныеСотрудников.УчитыватьВремяКакРабочее КАК УчитыватьВремяКакРабочее,
	|	УвольнительныеСотрудников.Часы КАК Часы,
	|	УвольнительныеСотрудников.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрНакопления.УвольнительныеСотрудников КАК УвольнительныеСотрудников
	|ГДЕ
	|	УвольнительныеСотрудников.ДатаПростоя МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|	И УвольнительныеСотрудников.Сотрудник В(&Сотрудники)";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТНабора = РезультатЗапроса.Выгрузить();
	Для Каждого Стр Из ТНабора Цикл
		НаборЗаписей = РегистрыНакопления.УвольнительныеСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Стр.Регистратор;
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Сотрудник = Стр.Сотрудник Тогда
				Запись.Часы = 0;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	Возврат ТаблицаСотрудников;
КонецФункции
